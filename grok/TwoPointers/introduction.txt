Introduction
in problems where we deal with sorted lists and need to find a set of elements that fulfil certain constraints,
two pointers approach becomes quite useful. set of elements could be a pair, a triplet or even a subarray.

example:
given an array of sorted nums and a target sum, find a pair in the array whose sum is equal to the given target.

to solve this problem, we can consider each element one by one (first pointer) and iterate through the
remaining elements (second pointer) to find a pair with the given sum. time comp of this algo will be
O(N^2), where N is the num of elements in the input array.

given the array is sorted, an efficient way would be to start with one ptr at the beginning and the other at the end.
at every step, see if numbers add up to target sum if not, do:
    1. if the sum of the two numbers is greater than target, this means we need a pair with a smaller sum.
        so to try mroe pairs, we can decrement the end pointer.
    2. if the sum is less than the target sum, it means we need a pair with a larger sum. so to 
        try more pairs, increment the start-pointer.