Problem Challenge 1: Permutation in a String (hard)

Problem statement

given a string and a pattern, find out if the string contains any permutation of the pattern.

permutation is defined as the rearranging of the characters of the string. for example, abc has abc, acb, bac, bca cab and so on.

if a string has 'n' distinct characters, it will have n! permutations.

Example:
Input: String="oidbcaf", Pattern="abc"
Output: true
Explanation: The string contains "bca" which is a permutation of the given pattern.

Solution
sliding window pattern, can use similar strategy as discussed in Longest substring with K distinct chars.
can use HashMap to remember the frequencies of all characters int th egiven pattern.
goal is to match all characters from this map with a sliding window in the given string. here are the steps
  1. create the map to calculate the frequencies of all characters in the pattern.
  2. iterate through the string adding one char at a time in sliding window
  3. if the char being added matches a char in map, decrement its frequency in the map. if the character frequency becomes zero, we have found a complete match.
  4. if at any time, the number of chars matched is equal to the number of distinct chars in the pattern, we have our required permutation.
  5. if the window size is greater than the length of the pattern, shrink the window to equal pattern size.
    if the char leaving was part of the pattern, put it back in the maps frequency.


