String Anagrams (hard)

Problem Statement
  given a string and a pattern, find all anagrams of the pattern in the given string.

  every anagram is a permutation of a string. as we know, when we are not allowed to repeat chars while finding permutations of a string, we get N! perms/anagrams of a strin ghaving N chars.

  write a function to return a list of starting indices of the anagrams of the pattern in the given string.

Example 1:
Input: String="ppqp", Pattern="pq"
Output: [1, 2]
Explanation: The two anagrams of the pattern in the given string are "pq" and "qp".

Written Solution
problem follows the Sliding Window pattern and is similar to the Permutation in a String problem.
We need to find every occurance of any permutation of the pattern in the string. use a list to store the starting indices of the anagrams of the pattern in the string.

code solution

def find_string_anagrams(str1, pattern):
  window_start, matched = 0, 0
  char_frequency = {}

  for chr in pattern:
    if chr not in char_frequency:
      char_frequency[chr] = 0
    char_frequency[chr] += 1

  result_indices = []
  # Our goal is to match all the characters from the 'char_frequency' with the current 
  # window try to extend the range [window_start, window_end]
  for window_end in range(len(str1)):
    right_char = str1[window_end]
    if right_char in char_frequency:
      # Decrement the frequency of matched character
      char_frequency[right_char] -= 1
      if char_frequency[right_char] == 0:
        matched += 1

    if matched == len(char_frequency):  # Have we found an anagram?
      result_indices.append(window_start)

    # Shrink the sliding window
    if window_end >= len(pattern) - 1:
      left_char = str1[window_start]
      window_start += 1
      if left_char in char_frequency:
        if char_frequency[left_char] == 0:
          matched -= 1  # Before putting the character back, decrement the matched count
        char_frequency[left_char] += 1  # Put the character back

  return result_indices


def main():
  print(find_string_anagrams("ppqp", "pq"))
  print(find_string_anagrams("abbcabc", "abc"))


main()

time and space comp
time comp is O(N+M), N and M are num of chars in input string and num of chars in pattern

space comp is O(M) since in worst case the whole pattern can have distinct chars in hashmap. will also need O(N) space for the result list, only when the pattern has only one char and the string contains only that char.
