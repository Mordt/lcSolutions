Introduction

often when dealing with arrays, we are asked to deal with subarrays

for example, finding the average of all 5-element sub arrays in a given array

can solve this with brute force or sliding window

brute force:
    Python example:

    def find_averages_of_subarrays(K, arr):
        result = []
        for i in range(len(arr)-K+1):
        # find sum of next 'K' elements
            _sum = 0.0
        for j in range(i, i+K):
            _sum += arr[j]
        result.append(_sum/K)  # calculate average

    return result

def main():
    result = find_averages_of_subarrays(5, [1, 3, 2, 6, -1, 4, 1, 8, 2])
    print("Averages of subarrays of size K: " + str(result))

main()

    time complexity:
        since for every element in array we are calculating the sum of its next k elements,
        the time comp of above algo will be O(n*k), where N is the number of elements in input array.

        super inefficient, we can find a better way.

        the inefficiency is that for any two consecutive subarrays of size 5, the overlapping part (which will contain four elements),
        will be evaluated twice.

        efficient solution would be to visualise each subarray as a sliding window of 5 elements.
        this means that we slide the window by one elemenet when proceeding with subarrays.
            to reuse the sum from the prev subarray, we subtract the outgoing element from the window
            and add the incoming element in the sliding window.
            this saves us from going through whole array to find sum, and as such the time comp is reduced to O(n).

sliding window Python:
def find_averages_of_subarrays(K, arr):
  result = []
  windowSum, windowStart = 0.0, 0
  for windowEnd in range(len(arr)):
    windowSum += arr[windowEnd]  # add the next element
    # slide the window, no need to slide if we've not hit the required window size of 'k'
    if windowEnd >= K - 1:
      result.append(windowSum / K)  # calculate the average
      windowSum -= arr[windowStart]  # subtract the element going out
      windowStart += 1  # slide the window ahead

  return result


def main():
  result = find_averages_of_subarrays(5, [1, 3, 2, 6, -1, 4, 1, 8, 2])
  print("Averages of subarrays of size K: " + str(result))


main()