Longest Subarray with Ones after Replacement (hard)

problem:
    given an array containing 0s and 1s, if you're allowed to replace no more than 'k' 0s with 1s,
    find the length of the longest contiguous subarray having all 1s.

Example
    Input: Array=[0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], k=2
    Output: 6
    Explanation: Replace the '0' at index 5 and 8 to have the longest contiguous subarray of 1s having length 6.

Solution
    Sliding window pattern, similar to Longest substring with same letters after replacement.
    only difference is that we only have 2 chars in input arrays (1 and 0).

    iterate through array to add one number at a time to window. keep track of max number of repeating 1s in curr window
    (called maxOnesCount).
    at any one time we know that we can have a window with 1s repeating MaxOnesCount times, so we should try to replace 
    the remaining 0s. if we have more than 'k' remaining 0s, shrink the window.

Python solution
def length_of_longest_substring(arr, k):
  window_start, max_length, max_ones_count = 0, 0, 0

  # Try to extend the range [window_start, window_end]
  for window_end in range(len(arr)):
    if arr[window_end] == 1:
      max_ones_count += 1

    # Current window size is from window_start to window_end, overall we have a maximum 
    # of 1s repeating 'max_ones_count' times, this means we can have a window with 
    # 'max_ones_count' 1s and the remaining are 0s which should replace with 1s.
    # Now, if the remaining 0s are more than 'k', it is the time to shrink the window as
    # we are not allowed to replace more than 'k' 0s
    if (window_end - window_start + 1 - max_ones_count) > k:
      if arr[window_start] == 1:
        max_ones_count -= 1
      window_start += 1

    max_length = max(max_length, window_end - window_start + 1)
  return max_length

def main():
  print(length_of_longest_substring([0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], 2))
  print(length_of_longest_substring(
    [0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], 3))

main()

time and space comp