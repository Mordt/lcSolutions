Longest Substring with Same Letters after Replacement (hard)

problem
Given a string of lowercase letters, if you are allowed to replace no more than 'k' letters with any letter,
find the length of the longest substring having the same letters after replacement.

example
    Input: String="aabccbb", k=2
    Output: 5
    Explanation: Replace the two 'c' with 'b' to have a longest repeating substring "bbbbb".

solution
    sliding window pattern, can use dynamic sliding window like in longest substr with distinct chars.
    can use hashmap to count the frequency of each letter.

    1. will iterate through the string to add one letter at a time to the window.
    2. will keep track of the count of maximum repeating letter in ANY window. clal it maxRepeatLetterCount.
    3. at any time, we know that we have a window with one letter repeating maxRepeatLetterCount times;
        meaning we should try to replace the remaining letters.
        - If remainin gletters are less than or equal to 'k', we can replace them all.
        - if we have mroe than 'k' remaining letters, shrink the window as we cannot replace more than 'k' letters.
    
    we do not need to know the exact max count of the current window, only whether it exceeds the historical max
    count, and that only happens because of a newly added char.

Python3 solution
def length_of_longest_substring(str1, k):
  window_start, max_length, max_repeat_letter_count = 0, 0, 0
  frequency_map = {}

  # Try to extend the range [window_start, window_end]
  for window_end in range(len(str1)):
    right_char = str1[window_end]
    if right_char not in frequency_map:
      frequency_map[right_char] = 0
    frequency_map[right_char] += 1

    # we don't need to place the maxRepeatLetterCount under the below 'if', see the 
    # explanation in the 'Solution' section above.
    max_repeat_letter_count = max(
      max_repeat_letter_count, frequency_map[right_char])

    # Current window size is from window_start to window_end, overall we have a letter 
    # which is repeating 'max_repeat_letter_count' times, this means we can have a window 
    # which has one letter repeating 'max_repeat_letter_count' times and the remaining 
    # letters we should replace. If the remaining letters are more than 'k', it is the 
    # time to shrink the window as we are not allowed to replace more than 'k' letters    
    if (window_end - window_start + 1 - max_repeat_letter_count) > k:
      left_char = str1[window_start]
      frequency_map[left_char] -= 1
      window_start += 1

    max_length = max(max_length, window_end - window_start + 1)
  return max_length

def main():
  print(length_of_longest_substring("aabccbb", 2))
  print(length_of_longest_substring("abbcb", 1))
  print(length_of_longest_substring("abccde", 1))

main()