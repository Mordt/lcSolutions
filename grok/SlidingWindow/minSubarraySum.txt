Problem Statement

given an array of positive numbers and a positive nuber 's', find the length of the 
smallest contiguous subarray whose sum is greater than or equal to 's'. return 0 otherwise.
so returning length of subarray, need to keep track of sliding window size

solution

sliding window pattern, but with dynamic window size.
    1. First, add up elements from the beginning of array until their sum becomes greater than
        or equal to s
    2. These elements will constitute our sliding window. We are asked to find the smallest
        such window having a sum >= S. Remember the length of this window as the smallest so far.
    3. Keep adding one element in the sliding window (slide window ahead) in a stepwise fashion
    4. at each step, try to shrink the window from the beginning. Shrink until window sum is smaller than
        S again. Necessary to ensure the smallest window. Happens in multiple steps:
            -check if current window length is the smallest so far, and if so, remember its length
            -subtract the first element of the window from the sum to shrink the sliding window.

code:
import math

def smallest_subarray_sum(s, arr):
  window_sum = 0
  min_length = math.inf
  window_start = 0

  for window_end in range(0, len(arr)):
    window_sum += arr[window_end]  # add the next element
    # shrink the window as small as possible until the 'window_sum' is smaller than 's'
    while window_sum >= s:
      min_length = min(min_length, window_end - window_start + 1)
      window_sum -= arr[window_start]
      window_start += 1
  if min_length == math.inf:
    return 0
  return min_length

def main():
  print("Smallest subarray length: " 
     + str(smallest_subarray_sum(7, [2, 1, 5, 2, 3, 2])))
  print("Smallest subarray length: " 
     + str(smallest_subarray_sum(7, [2, 1, 5, 2, 8])))
  print("Smallest subarray length: " 
     + str(smallest_subarray_sum(8, [3, 4, 1, 1, 6])))

main()

Time and Space complexity
time comp will be O(N). the outer for loops runs for all elements, and the inner while loop processes
    each element only once; therefore the time comp of the algo will be O(N+N), which is
    asymptotically equivalent to O(N).

Space comp is in constant space (O(1))