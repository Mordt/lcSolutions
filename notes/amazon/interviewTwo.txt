Email notes
    will involve live coding and behavioural questions.
    REVIEW interview prep - SDE
    consider postponing interview for more preparation

Greenfield Initative
    team in bris, sydney and melbourne
    visa sponsorship provided

    personalities required:
        high motivation to deliver results
        analyticaal acumen and a passion for solving problems
        ability to make decisions in the face of ambiguity
        desire to experiment, innovate and learn from everything
        good comm skills, ability to work independently everywhere
        enjoyment for working as a team as well as a strong sense of ownership and personal achievement

    what will you do 
        work on back end services that can scale to millions of requests
        tackle some intriguing problems in software architecture 
        define scalability testing and scalability improvements for websites while developing
            new features
        build products that will reach millions

Interview Prep SDE
    will meet 4 or 5 devs, each convo will be 60 mins long
    review amazon leadership principles!!
        learn and be curious!!
        Own your projects!
        ask the right questions!!

    Each interviewer will ask about technical skills:
        system design competency
            working knowledge of a few comon and useful design patterns,
            as well as knowledge of how to write software in object-oriented way
            Expect to apply concepts to a particlular problem and defend 
            your design choices.

        three coding competencies
            show off knowledge of fundamentals (hash maps, arrays, binary trees,
            algorithms.)
            evaluation will cover data structures and algorithms, logical and maintainable
            and problem solving.

            consider all 3 as an integrated approach.

tips for preparation
setting stage
    set room up well, check connection, power, etc.
    take notes!!
    remember resume
    consider questions you would like to ask 
        (intiatives/projects, team culture, scope of role)
    reach out if have questions

responding to questions
    start with the customer. include customer (internal or external),
        in situation. work backwards from the customer.
    use multiple examples. do not repeat stories or examples
    when sharing examples, be specific and provide details and data.
    I before we. focus on what YOU owned, what YOU did.
    show how you deal with ambiguity. break questions down, navigate
        intentionally vague requirements. change strategies quickly if approach doesnt work,
        work through open ended questions.
    leverage notes, use them but don't be 100% reliant on them.

Interview apps
    amazon chime: have it ready. download to desktop.
    get used to virtual whiteboarding.

Get to know the interviewers
hiring manager
    typically a software development manager who would directly manage you or similar.
    their role will be to make the best hiring decision for amazon.
    will consider how your skills and experience compare to the objective standards for SDE success at amazon.

    tip:
      the hiring manager can answer questions about the type of work youd do in the role, the future vision of the team and noteworthy accomplishments by the team.
      great person to ask about what it takes to be successful at aazon.

Bar raisers
  objective third parties who act as advisors

what to expect
    taking notes, they will pause to do it
    they will redirect and interrupt to keep you on topic
    will ask probing and follow-up questions
    will answer questions about working at amazon

system design
    be able to explain how your solution solves a problem

    good design is critical to good code.
    use oop best practices. think and talk about software components, distributed systems and system trade-offs
    even more important at amazon because of scale.

    what does system design competency assess?
      measures your ability to black box design a software system (?)
      goal is for you to deliver a design in production with considerations of deployment, scaling failures, availability, and performance. be prepared to discuss latency and concurrency.

    topics to review:
      software systems need software components, something to store data, something to make decisions (business logic) and APIs or processes.
      knowledge of distributed systems, SOA, and n-tiered software architecture is very important in answering system design questions.

      practice drawing the system.

how to best showcase system design
    your interviewer is there to help with questions and that.
    as a designer, you should start with the primary customer and work backwards:
      who are you designing the system for and why
      what expectations do they have in terms of functionality
      what things would a customer assume will be in the system but they may not think about it in the front of their minds? (i.e. it will be fast and secure)
      what happends if we become hyper popular with customers? what will 2x growth look like? or 10x? how would that influence the design?

    understand first what problem your system is supposed to solve. ask clarifying questions if this is ot clear

    see the interviewer as the customer, requirements might be intentionally vague, and they can give you clarifications.

    write/raise the requirements or assumptions you are making, and base your design on them. draw a diagram

other important system design considerations
    scaling is a critical component of software design 
      research scaling when designing your system, research scalablity concepts and tchnology prior to your interview such as caching, load balancing, non-relational databases, micro services and sharding.

    fault tolerance translates to the customer obsession leadership principle
      amazon ensures that even when dependencies are failing theyre doing their best to continue to serve customers. frugal redundancy is important.


Transcript
    suggests logging of cpu and memory util for processes for tracking
    interviewer asks for some clarity regarding issues/failure response

strength is good because:
    see strength criteria such as designs for operational performance, plans for failure and measures results.
    considers both technical and business metrics, as well as data quality
    thinks about how to monitor for performance and catch potential problems
    considers resiliency and making things easier for operators

logical and maintainable
    interview explores how you structure your methods and classes to ensure the logical separation of concerns is clear. 
    explores how you name varuables, methods and classes in a way that is readable and logical.

    test names should describe business and technical requirements, and the test code should be consistent with the test names.

    what is assessed
        measures your ability to write maintainable, readable, reusable and understandable code.

    how to best prepare?
        be technical, get as technical as possible with answers
        be ready to write code in realtime during the interviewbe prepared to gather requirements and translate them into clean
            written code, checking edge classes
        no pseudo code

    how to best showcase logical and maintainable
    
    simple code:
        leverage reuse, properly format, proper coding constructs
        write out examples of how code will be used. think of ways to simplify if possible
        start with simplest solution then enhance as you go
        consider extendibility, make sure you will be able to extend the code when/if requirements change, 
            avoid a single function that does everything.
    maintainable code  
        quickly able to trace impact of changes, clear variable naming conventions
        make sure that your method, parameter and variable names are clear and descriptive.
        separate functionality into discrete methods/functions with clear responsibilities.
        consider that they will likely operate software longer than it took to write it, so the clearer things are, the better.
        code shouyld be reasonably easy to maintain as traffic or load increases.
    organisable code
        organise code in a way that is easy to read and understand
        use functions, classes and inheritance to break up solution into logical components.
        this improves readability and makes it easier to extend the solution later.
    syntactically correct code
        write correct code
        pick the language you're most comfortable with (python).
        ensure you're comfortable with it, with things like error/exception handling, managing resources,
            file input/output, network connections
        use descriptive variable and method names
        if you need a method call but forget its exact name or arguments, call out and ask if you can make up a 
            name and arguments.
    working code
        create code that works as intended
        start small, solve one thing at a time and test for correctness as you go
        iterate over your solution as you ask questions or the interview follows up.
        if you can see clear design patterns or abstractions that can be applied from the beginning, use them!
        it's better to realise code can be refactored to support more requirements in a maintainable way,
            rather than building a complex solution that doesn't solve the requirements.
        think through test cases, edge cases, boundary conditions, nill/nil/none etc.
        try to enumerate these cases before coding so that when you have a solution, you can use these as validation.
        be sure to also confirm test cases with your interviewer.

Data Structures and Algorithms
    overview
        interviewer will ask you to solve a ds and algo problem.
        your job is to write code with an appropriate data structure to solve the problem.
        will be asked to compare various approaches and justify your decision.

        assesses your ability to choose the most efficient runtime solutions. e.g. some structures are 
            more perfomrant for reading data while others are better for writing.
        algorithms should be as fast as possible an solve the problem correctly. remember edge cases.

        how to prepare:
            consider runtimes for common operations and understand how they use memory.
            understand structures you see in core libraries.
            understand common algos:
                traversals
                divide and conquer (binary search)
                bfs vs dfs vs recursion.
            discuss runtimes, theoretical limitations and basic implementations for different cases.
        
        suggested areas of refresh:
            binary search tree data
            scalability methods - redundancy, partitioning, caching, indexing, load balancing and queues.
                this can improve the design of the system
    
    how to showcase
        optimisation
            use optimal structures and algos to solve a problem
            build a toolbox of what data structures would be useful in common scenarios such as efficient access 
                by key/object/position, maintaining sort order, searching, and finding max/mins.
            think about edge cases with chosen data structure.
            be familiar with features in your programming language of choice. expand your toolbox.
            if you are comparing two data structures or algorithms that each have some drawback, pick one and justify it.
                remember to explain the benefit, operations and time complexity.
        identify shortcomings
            identify shortcomings and tradeoffs with different ds and algos
            clarify any shortcomings/issues you can expect in your solution.
                if you know of a better DS but are not confident in using it, make sure to mention it and discuss with youri intervieweer.
            try to identify the pattern for a given problem, but keep it simple.
        justification
            justify your decisions
            there is always more than one way to solve a problem. if you identify other solutions, explain why you chose yours.
            be prepared to talk about your understanding of the data structures you choose and answer questions about how they work in detail.
                do you know multiple ways of resolving ocllisions in hash maps? why is heap insertion O(log n)? etc.
        runtime and space tradeoffs
            demonstrate a solid grasp of runtime and space complexity tradeoffs
            if the interviewer asks you a real-world problem, abstract and think through all relevant data structures that could be used.
            before finalising a solution, clarify problem constraints and consider multiple ways foward, before recommending one and going forward with it.

Problem solving competency
    overview
        ambiguous problems will be presented, understand how much time you have and split time into 3 tasks:
            uncovering requirements and considering the evolution of the situation
            implementing a first pass of the design and covering all requirements
            enhancing the solution, and when satisfied, seek out more requirements to show how your solution evolves when requirements change.
        what's assessed?
            checks your ability to take something complex, break it down, identify a solution and translate it into working code.
            make sure you ask clarifying questions to understand how you can start to solve the problem.
        how to prepare
            understand the problem and implications before jumping into code.
            test ideas with examples and callout any assumptions you're making. ask the interviewer if they agree

            suggested areas of refresh:
                practice solving problems without an IDE. make sure you have correct syntax and that so you can focus on a solution instead of the basics.
                demonstrate how you deal with ambiguity. demonstrate how you:
                    handle intentionally vague requirementschange strategies when an approach doesn't work
                    work through open-ended questions
                    be adaptable and quick learning
                
                think out loud. whiteboarding challenges are an opportunity to show off problem solving skills.
                    practice talking to yourself as you work through your process to solve a problem.
                keep it simple.
    
    how to showcase
        correctly solve the problem
            consider edge cases and inputs that break your code.
        justify decisions
            justify decisions by identifying potential tradeoffs with several different solutions.
                understand why one solution is better than another
            get at leat one working solution, then work from there.
            explain your approach before coding, vocalise thought process.
            when vocalising points, write different inputs. do the whole shebang.
        ask questions
            clarify the problem with questions
            make sure you understand the problem before coding
            test ideas with exampels and callout assumptions you make.
        consider additional factors
            dev effort, team comp, etc, beyoind the basic problem.
            have best practice for programming
        require minimal hints
            identify test cases, test your code
            dont be afraid to ask for help but ask good, directed questions
            no trick questions or trick hints. write hints down.

leadership principles
    overview
        they want to understand how i use amazon leadership principles in my own work experience.
            what are the principles?
            they guide the business in every way. here they are:
                earn trust
                deliver results
                customer obsession
                ownership
                invent and simplify
                are right a lot 
                learn and be curious
                hire and develop the best
                insist on the highest standards
                think beginning
                bias for action 
                frugality
                dive deep 
                have baclbone, disagree and commit
                strive to be the best employer
                success and scale bring broad responsibility
            
            how are they assessed?
                behavioural based, will get questions about past experiences and challenges faced.

            how to best prepare
                consider your most memorable days in your previous jobs, independent of LP.
                spend time recalling specific details of said challenges, then how you applied the specific LP's.
                recall failure and growth.

    responding using STAR
        Situation
            provide context and background for the situation.
            be specific, from a previous job, project or whatever.
        Task
            describe the task you were working towards.
            include quantitative and qualitative goals.
        Action
            describe the actions you took to address the situation with an appropriate amount of detail,
            keep the focus on you. what steps did you take? how did you contribute? use "I" not "we".
        Result
            describe the outcomes of your acrtions and don't be shy about taking credit for your behaviour.
            should be able to answer what happened? how did you measure success? what results did you achieve? what tradeoffs were made? what did you learn or would you have done differently?
            metrics:
              cost saving
              quantify to udnerstand volume, size, scale
              percentage change
              time to market, time savings
              impact to customer and team
              quality improvements

Showcasing principles
    the examples shown demonstrate clear and specific situations that exemplify the star system.
    there is an emphasis on ownership, learning and technical details.

    possible questions:
        tell me about a time you uncovered a significant problem in your team
        give an example of a tough or critical piece of feedback you received
        tell me about a time when you delivered an important project under a tight deadline
        describe a time when you felt strongly about something on a project, but the team decided to go in a different direction.
        tell me about a time when you took on something significant outside your area of responsibility.
        what's the coolest thing you have learned on your own that has helped you perform better in your job?
        
Conclusion
    important to take system design and coding seriously
    also key to remember several stories according to the amazon leadership principles.
    data structures and algos important. know when to use a data structure and why
        remember runtime, time and space complexity
    make sure code is maintainable and has consideration for future use
    get used to whiteboarding and thinking out a problem before committing to it
