hash table notes

made for fast data retrieval at the cost of space

like an array, but indices are related to the data.
    so knowing the data we want helps us find the index in O(1) time.

hash tables use a one way hash function for this. can be used as a hashmap for fast retrieval.

hash function 
    calculation applied to a key to transform it to an index numbers corresponding to a position in the hash table.
    for numeric keys, divide the key by the number of available addresses, n, and take the remainder.
        address = key mod N
    for alphanumeric keys, divide the sum of ascii codes by the number of available addresses, n, and take the remainder.

different hashing functions exist. can choose depending on situation.

collisions
    sometimes the same index is generated for two different keys.
    this is known as a collision.

    can also use open addressing to place an item in the next available spot in the instance of a collision.
        linear probing. used to find next available slot. if reaches the end, might cycle to the beginning.
            if this is used and we later search for an item that has been linear probed, we will also ahve to conduct a linear search to find it.

    can solve the above by increasing the size of the array.

closed addressing
    can resolve this with separate chaining (index pointing to linked list)
    search can be used with index calculation then linked list traversal.
    worst case is n if all items are in the same index, however more items are in their correct spots.
